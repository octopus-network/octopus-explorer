{"version":3,"sources":["libs/utils.ts","libs/polkadotApi.ts","assets/octopus_logo_white.png","components/Header.tsx","components/Footer.tsx","assets/background.svg","libs/searchFuncs.ts","components/HomeBanner.tsx","views/Root.tsx","views/Home/ExtrinsicsBox.tsx","views/Home/BlocksBox.tsx","views/Home/index.tsx","components/SearchBox.tsx","views/Blocks/index.tsx","components/CopyButton.tsx","views/Blocks/BlockDetail.tsx","views/Accounts/index.tsx","views/Accounts/AccountDetail.tsx","views/Transfers/index.tsx","views/Transfers/TransferDetail.tsx","views/Extrinsics/ExtrinsicDetail.tsx","views/Extrinsics/index.tsx","App.tsx","index.tsx"],"names":["BigNumber","require","amountToHuman","origin","decimals","div","toNumber","toFixed","appchainApi","appchainInfo","getAmountHuman","appchain_metadata","fungible_token_metadata","async","getBalanceOf","accountId","query","system","account","data","free","toString","NavLink","title","to","isActive","useLocation","pathname","split","as","RouterLink","background","color","_hover","_active","Header","style","maxW","h","align","justify","p","pl","src","logo","htmlWidth","alt","spacing","display","xs","sm","md","lg","href","target","rightIcon","ExternalLink","colorScheme","IconButton","icon","Hamburger","fontSize","Footer","justifyContent","variant","aria-label","IoLogoGithub","boxSize","IoMail","checkKeywordType","keyword","appoloClient","test","blockNumber","client","rt","gql","variables","number","blocks","nodes","id","fetchBlockByNum","address","encodeAddress","isHex","hexToU8a","decodeAddress","error","isValidAddress","console","log","accountResult","hash","fetchAccountByHash","extrinsic","fetchTxByHash","blockHash","block","fetchBlockByHash","getLinkFromSearch","type","link","HomeBanner","navigate","useNavigate","useApolloClient","inputRef","useRef","setKeyword","useState","isSearching","setIsSearching","headerBg","backgroundSize","backgroundPosition","backgroundRepeat","pt","pb","w","ref","transition","onFocus","current","maxWidth","onBlur","onChange","e","value","size","flex","placeholder","borderRightRadius","borderLeftRadius","onClick","Promise","resolve","setTimeout","isLoading","disabled","Root","isHome","minH","NEW_EXTRINSICS_QUERY","ExtrinsicsBox","loading","stopPolling","startPolling","useQuery","useEffect","borderRadius","boxShadow","alignItems","extrinsics","map","section","method","timestamp","blockId","idx","borderBottom","substr","mt","TimeIcon","ml","dayjs","add","toNow","NEW_BLOCKS_QUERY","BlocksBox","events","totalCount","Time","mr","GLOBAL_DATA_QUERY","StateBox","label","height","textColor","Home","templateColumns","colSpan","templateRows","rowSpan","MdApps","orientation","MdAccountCircle","accounts","MdTrendingUp","MdSwapHoriz","systemTokenTransfers","gap","SearchBox","BLOCKS_QUERY","Blocks","page","setPage","isOnTable","setIsOnTable","offset","pageSize","onMouseEnter","onMouseLeave","flexGrow","ChevronLeft","Math","ceil","ChevronRight","CopyButton","hasCopied","onCopy","useClipboard","CheckIcon","CopyIcon","BLOCK_DETAIL_QUERY_BY_NUMBER","BLOCK_DETAIL_QUERY_BY_HASH","BlockDetail","useParams","detail","setDetail","setBlockNumber","isConfirmed","setIsConfirmed","secondsPast","setSecondsPast","isBN","setIsBN","diffSeconds","diff","parseInt","ChevronLeftIcon","ChevronRightIcon","format","abs","parentHash","specVersion","ACCOUNT_QUERY","Accounts","setAccounts","all","balance","calls","systemTokenTransfersByFromId","systemTokenTransfersByToId","slice","CALLS_QUERY","TRANSFERS_OUT_QUERY","TRANSFERS_IN_QUERY","PAGE_SIZE","AccountDetail","callsPage","setCallsPage","transfersOutPage","setTransfersOutPage","transfersInPage","setTransfersInPage","callsQuery","transfersOutQuery","transfersInQuery","signerId","extrinsicId","fromId","toId","amount","Transfers","TransferDetail","systemTokenTransfer","EXTRINSIC_DETAIL_QUERY","ExtrinsicDetail","signer","nonce","wordBreak","signature","EXTRINSICS_QUERY","Extrinsics","App","setAppchainInfo","setClient","appchain","URLSearchParams","window","location","search","get","info","getAppchainInfo","wsProvider","WsProvider","rpc_endpoint","ApiPromise","create","provider","initPolkaApi","err","ApolloClient","uri","subql_endpoint","cache","InMemoryCache","ApolloProvider","path","element","thickness","speed","emptyColor","extend","relativeTime","NETWORK","process","REACT_APP_OCT_NETWORK","REGISTRY","REACT_APP_OCT_REGISTRY_CONTRACT_NAME","nearConfig","networkId","nodeUrl","contractName","walletUrl","helperUrl","explorerUrl","tokenDecimal","near","connect","Object","assign","deps","keyStore","keyStores","BrowserLocalStorageKeyStore","walletConnection","WalletConnection","registry","Contract","viewMethods","changeMethods","appchain_id","appchainStatus","get_appchain_status_of","appchainAnchor","appchain_anchor","anchor","get_appchain_settings","initNear","then","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e859dc03.chunk.js","sourcesContent":["const BigNumber = require(\"bignumber.js\");\nexport function amountToHuman(origin: string, decimals: number) {\n  return new BigNumber(origin)\n    .div(new BigNumber(10 ** decimals))\n    .toNumber()\n    .toFixed(2);\n}\n\nexport function amountFromHuman(origin, decimals: number) {\n  return new BigNumber(origin)\n    .times(new BigNumber(10 ** decimals))\n    .toNumber()\n    .toFixed(2);\n}\n","import { ApiPromise, WsProvider } from \"@polkadot/api\";\nimport { amountToHuman } from \"./utils\";\n\nlet appchainApi;\nlet appchainInfo;\nexport async function initPolkaApi(info: any) {\n  appchainInfo = info;\n  const wsProvider = new WsProvider(info.rpc_endpoint);\n  appchainApi = await ApiPromise.create({\n    provider: wsProvider,\n  });\n}\n\nexport function getAmountHuman(origin) {\n  const {\n    appchain_metadata: {\n      fungible_token_metadata: { decimals },\n    },\n  } = appchainInfo;\n  return amountToHuman(origin, decimals);\n}\n\nexport async function getBalanceOf(accountId: string) {\n  if (appchainApi) {\n    const {\n      appchain_metadata: {\n        fungible_token_metadata: { decimals },\n      },\n    } = appchainInfo;\n    const account = await appchainApi.query.system.account(accountId);\n    return amountToHuman(account.data.free.toString(), decimals);\n  }\n}\n","export default __webpack_public_path__ + \"static/media/octopus_logo_white.dc543f3b.png\";","import { Container, Flex } from \"@chakra-ui/layout\";\nimport {\n  Box,\n  Button,\n  HStack,\n  Spacer,\n  Image,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Link,\n  IconButton,\n  MenuIcon,\n} from \"@chakra-ui/react\";\nimport {\n  ChevronDownIcon,\n  ExternalLinkIcon,\n  HamburgerIcon,\n} from \"@chakra-ui/icons\";\nimport { Link as RouterLink, useLocation } from \"react-router-dom\";\nimport logo from \"assets/octopus_logo_white.png\";\n\nconst NavLink = ({ title, to }) => {\n  const location = useLocation();\n  const pathArr = location.pathname.split(\"/\");\n  const isActive = \"/\" + pathArr[1] == to;\n  return (\n    <Link as={RouterLink} to={to}>\n      <Button\n        background=\"transparent\"\n        color={isActive ? \"white\" : \"whiteAlpha.700\"}\n        _hover={{ background: \"transparent\" }}\n        _active={{ background: \"transparent\", color: \"white\" }}\n      >\n        {title}\n      </Button>\n    </Link>\n  );\n};\n\nconst Header = () => {\n  return (\n    <div style={{ background: \"#26262f\" }}>\n      <Container maxW=\"container.xl\" h=\"88px\">\n        <Flex align=\"center\" justify=\"center\" h=\"100%\">\n          <Box p=\"2\" pl=\"0\">\n            <Image src={logo} htmlWidth={140} alt=\"logo\" />\n          </Box>\n          <Spacer />\n          <HStack\n            spacing=\"5px\"\n            display={{ xs: \"none\", sm: \"none\", md: \"none\", lg: \"block\" }}\n          >\n            <NavLink title=\"Home\" to=\"/home\" />\n            <NavLink title=\"Blocks\" to=\"/blocks\" />\n            <NavLink title=\"Accounts\" to=\"/accounts\" />\n            <NavLink title=\"Transfers\" to=\"/transfers\" />\n            <NavLink title=\"Extrinsics\" to=\"/extrinsics\" />\n            <Link href=\"https://testnet.oct.network\" target=\"_blank\">\n              <Button\n                background=\"transparent\"\n                color=\"whiteAlpha.700\"\n                _hover={{ background: \"transparent\" }}\n                rightIcon={<ExternalLinkIcon />}\n                _active={{ background: \"transparent\", color: \"white\" }}\n              >\n                Testnet\n              </Button>\n            </Link>\n            {/* <Menu placement=\"bottom-end\" offset={[0, 20]}>\n              <MenuButton colorScheme=\"white\" color=\"whiteAlpha.700\" as={Button} rightIcon={<ChevronDownIcon />}>\n                Appchains\n              </MenuButton>\n              <MenuList>\n                <MenuItem>Easydeal</MenuItem>\n              </MenuList>\n            </Menu> */}\n          </HStack>\n          <Box display={{ md: \"block\", lg: \"none\" }}>\n            <Menu>\n              <MenuButton\n                colorScheme=\"white\"\n                as={IconButton}\n                icon={<HamburgerIcon fontSize=\"2xl\" />}\n              />\n              <MenuList>\n                <MenuItem>\n                  <Link as={RouterLink} to=\"/home\">\n                    Home\n                  </Link>\n                </MenuItem>\n                <MenuItem>\n                  <Link as={RouterLink} to=\"/home\">\n                    Blocks\n                  </Link>\n                </MenuItem>\n                <MenuItem>\n                  <Link as={RouterLink} to=\"/home\">\n                    Extrinsics\n                  </Link>\n                </MenuItem>\n              </MenuList>\n            </Menu>\n          </Box>\n        </Flex>\n      </Container>\n    </div>\n  );\n};\n\nexport default Header;\n","import { Container, Flex, Box, Text, HStack } from '@chakra-ui/layout';\nimport { IconButton, Icon, Link } from '@chakra-ui/react';\nimport { IoLogoGithub, IoMail } from 'react-icons/io5';\n\nconst Footer = () => {\n  return (\n    <div style={{ background: '#26262f' }}>\n      <Container maxW=\"container.xl\" p={2}>\n        <Flex align=\"center\" justifyContent=\"space-between\">\n          <Box p={4}>\n            <Text color=\"whiteAlpha.600\" fontSize=\"sm\">Copyright @ 2021 Octopus Network</Text>\n          </Box>\n          <HStack>\n            <Link href=\"https://github.com/octopus-network\" target=\"_blank\">\n              <IconButton variant=\"link\" aria-label=\"github\" _hover={{ color: 'whiteAlpha.800' }}\n                icon={<Icon as={IoLogoGithub} boxSize={6} />}></IconButton>\n            </Link>\n            <Link href=\"mailto:hi@oct.network\">\n              <IconButton variant=\"link\" aria-label=\"github\" _hover={{ color: 'whiteAlpha.800' }}\n                icon={<Icon as={IoMail} boxSize={6} />}></IconButton>\n            </Link>\n          </HStack>\n        </Flex>\n      </Container>\n    </div>\n  );\n}\n\nexport default Footer;","export default __webpack_public_path__ + \"static/media/background.f2028ec3.svg\";","import { gql } from \"@apollo/client\";\nimport { decodeAddress, encodeAddress } from \"@polkadot/keyring\";\nimport { hexToU8a, isHex } from \"@polkadot/util\";\nasync function fetchBlockByHash(blockHash, client) {\n  const rt = await client.query({\n    query: gql`\n      query blockdetail($id: String!) {\n        block(id: $id) {\n          id\n        }\n      }\n    `,\n    variables: { id: blockHash },\n  });\n\n  if (rt.data.block) {\n    return rt.data.block.id;\n  }\n\n  return rt.data.block;\n}\n\nasync function fetchBlockByNum(blockNumber, client) {\n  const rt = await client.query({\n    query: gql`\n      query blockdetail($number: BigFloat!) {\n        blocks(filter: { number: { equalTo: $number } }) {\n          nodes {\n            id\n          }\n        }\n      }\n    `,\n    variables: { number: blockNumber },\n  });\n\n  if (rt.data.blocks.nodes[0]) {\n    return rt.data.blocks.nodes[0].id;\n  }\n  return rt.data.blocks.nodes[0];\n}\n\nasync function fetchTxByHash(hash, client) {\n  const rt = await client.query({\n    query: gql`\n      query txdetail($id: String!) {\n        extrinsic(id: $id) {\n          id\n        }\n      }\n    `,\n    variables: { id: hash },\n  });\n\n  if (rt.data.extrinsic) {\n    return rt.data.extrinsic.id;\n  }\n  return rt.data.extrinsic;\n}\n\nasync function fetchAccountByHash(hash, client) {\n  const rt = await client.query({\n    query: gql`\n      query account($id: String!) {\n        account(id: $id) {\n          id\n        }\n      }\n    `,\n    variables: { id: hash },\n  });\n\n  if (rt.data.account) {\n    return rt.data.account.id;\n  }\n  return rt.data.account;\n}\n\nfunction isValidAddress(address) {\n  try {\n    encodeAddress(isHex(address) ? hexToU8a(address) : decodeAddress(address));\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nasync function checkKeywordType(keyword, appoloClient) {\n  if (/^[0-9]+$/.test(keyword)) {\n    const blockResult = await fetchBlockByNum(keyword, appoloClient);\n    if (blockResult) {\n      return \"blockNumber\";\n    }\n  } else if (isValidAddress(keyword)) {\n    console.log(\"here\");\n    const accountResult = await fetchAccountByHash(keyword, appoloClient);\n    if (accountResult) {\n      console.log(\"accountResult\", accountResult);\n      return \"accountId\";\n    }\n  } else if (/^0x[0-9a-f]+$/.test(keyword)) {\n    const tranResult = await fetchTxByHash(keyword, appoloClient);\n    if (tranResult) {\n      return \"transaction\";\n    }\n    const blockResult = await fetchBlockByHash(keyword, appoloClient);\n    if (blockResult) {\n      return \"blockHash\";\n    }\n  }\n  return \"\";\n}\n\nexport async function getLinkFromSearch(keyword, appoloClient) {\n  const type = await checkKeywordType(keyword, appoloClient);\n  let link = \"\";\n  if (type == \"blockNumber\" || type == \"blockHash\") {\n    link = `/blocks/${keyword}`;\n  } else if (type == \"transaction\") {\n    link = `/extrinsics/${keyword}`;\n  } else if (type == \"accountId\") {\n    link = `/accounts/${keyword}`;\n  }\n  console.log(\"link\", link);\n  return link;\n}\n","import {\n  Box,\n  Flex,\n  Input,\n  IconButton,\n  Button,\n  Center,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useRef, useState } from \"react\";\nimport headerBg from \"assets/background.svg\";\nimport { SearchIcon } from \"@chakra-ui/icons\";\nimport { Container } from \"react-dom\";\nimport { gql, useApolloClient } from \"@apollo/client\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getLinkFromSearch } from \"../libs/searchFuncs\";\n\nconst HomeBanner = () => {\n  const navigate = useNavigate();\n  const appoloClient = useApolloClient();\n  const inputRef = useRef<any>();\n  const [keyword, setKeyword] = useState(\"\");\n  const [isSearching, setIsSearching] = useState(false);\n  const onInputFocus = () => {\n    if (inputRef.current) {\n      inputRef.current.style.maxWidth = \"480px\";\n    }\n  };\n\n  const onInputBlur = () => {\n    if (inputRef.current) {\n      inputRef.current.style.maxWidth = \"420px\";\n    }\n  };\n\n  const onSearch = async () => {\n    setIsSearching(true);\n    let link = await getLinkFromSearch(keyword, appoloClient);\n    await new Promise((resolve) => setTimeout(() => resolve(0), 500));\n    navigate(link);\n    setIsSearching(false);\n  };\n\n  return (\n    <div\n      style={{\n        background: `#26262f url(${headerBg})`,\n        backgroundSize: \"1600px auto\",\n        backgroundPosition: \"center -110px\",\n        backgroundRepeat: \"no-repeat\",\n      }}\n    >\n      <Center h=\"120px\" pt=\"20px\">\n        <Text color=\"white\" fontSize=\"5xl\">\n          Where Web3.0 Happens\n        </Text>\n      </Center>\n      <Center h=\"180px\" pb=\"100px\">\n        <Flex\n          w=\"100%\"\n          maxW=\"420px\"\n          ref={inputRef}\n          transition=\"max-width .3s ease\"\n        >\n          <Input\n            color=\"grey\"\n            background=\"white\"\n            onFocus={onInputFocus}\n            onBlur={onInputBlur}\n            onChange={(e) => setKeyword(e.target.value)}\n            size=\"lg\"\n            flex=\"1\"\n            placeholder=\"Search by block, transaction id\"\n            borderRightRadius=\"0\"\n          />\n          <Button\n            colorScheme=\"teal\"\n            size=\"lg\"\n            borderLeftRadius=\"0\"\n            onClick={onSearch}\n            isLoading={isSearching}\n            disabled={isSearching}\n          >\n            Search\n          </Button>\n        </Flex>\n      </Center>\n    </div>\n  );\n};\n\nexport default HomeBanner;\n","import { Container, Center } from '@chakra-ui/layout';\nimport { Box, Image } from '@chakra-ui/react';\nimport { useLocation } from 'react-router-dom';\nimport Header from 'components/Header';\nimport Footer from 'components/Footer';\nimport HomeBanner from 'components/HomeBanner';\nimport { Outlet } from 'react-router-dom';\n\nconst Root = () => {\n  const location = useLocation();\n  const isHome = location.pathname == '/home';\n  return (\n    <div>\n      <Header />\n      {\n        isHome &&\n        <HomeBanner />\n      }\n      <Container maxW=\"container.xl\" p={5} minH={isHome ? `calc(100vh - 457px)` : `calc(100vh - 157px)`}>\n        <Outlet />\n      </Container>\n      <Footer />\n    </div>\n  );\n}\n\nexport default Root;","import { useState, useEffect } from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { Text, Flex, Box, Link, Spinner, HStack, Tag, Icon, Heading } from '@chakra-ui/react';\nimport dayjs from 'dayjs';\nimport { TimeIcon } from '@chakra-ui/icons';\nimport { Link as RouterLink } from 'react-router-dom';\n\nconst NEW_EXTRINSICS_QUERY = gql`\n  query QueryNewExtrinsics {\n    extrinsics(first: 5, orderBy: TIMESTAMP_DESC) {\n      nodes {\n        block {\n          number\n        }\n        id\n        method\n        section\n        timestamp\n        blockId\n      }\n    }\n  }\n`;\n\nconst ExtrinsicsBox = () => {\n  const { loading, data, stopPolling, startPolling } = useQuery(NEW_EXTRINSICS_QUERY);\n\n  useEffect(() => {\n    startPolling(1000);\n    return () => stopPolling();\n  }, [stopPolling, startPolling]);\n\n  return (\n    <Box p={4} background=\"white\" borderRadius=\"lg\" boxShadow=\"sm\">\n      {\n        loading ?\n        <Box p={10} display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n          <Spinner />\n        </Box> :\n        data?.extrinsics?.nodes.map(({ section, id, method, timestamp, blockId }, idx) => (\n          <Flex key={`block-${id}`} alignItems=\"center\" borderBottom=\"1px solid #eee\"\n            justify=\"space-between\" pt={4} pb={4}>\n            <Box>\n              <Link color=\"blue.600\" as={RouterLink} to={`/extrinsics/${id}`}>\n                <Heading as=\"h6\" size=\"sm\">{id.substr(0, 32)}...</Heading>\n              </Link>\n              <HStack spacing={2} mt={1}>\n                <Icon as={TimeIcon} ml={3} boxSize={3} color=\"yellow.600\" />\n                <Text color=\"grey\" fontSize=\"sm\">{ dayjs(timestamp).add(8, 'hours').toNow(true) }</Text>\n              </HStack>\n            </Box>\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n              <Tag size=\"sm\" colorScheme=\"cyan\">{section}.{method}</Tag>\n            </Box>\n          </Flex>\n        ))\n      }\n    </Box>\n  )\n}\n\nexport default ExtrinsicsBox;","import { useState, useEffect } from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport {\n  Text,\n  Flex,\n  Box,\n  Link,\n  Spinner,\n  HStack,\n  Heading,\n} from \"@chakra-ui/react\";\nimport dayjs from \"dayjs\";\nimport { TimeIcon } from \"@chakra-ui/icons\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nconst NEW_BLOCKS_QUERY = gql`\n  query QueryNewBlocks {\n    blocks(first: 5, orderBy: NUMBER_DESC) {\n      nodes {\n        id\n        number\n        timestamp\n        extrinsics {\n          totalCount\n        }\n        events {\n          totalCount\n        }\n      }\n    }\n  }\n`;\n\nconst BlocksBox = () => {\n  const { loading, data, stopPolling, startPolling } =\n    useQuery(NEW_BLOCKS_QUERY);\n\n  useEffect(() => {\n    startPolling(1000);\n    return () => stopPolling();\n  }, [stopPolling, startPolling]);\n\n  return (\n    <Box p={4} background=\"white\" borderRadius=\"lg\" boxShadow=\"sm\">\n      {loading ? (\n        <Box p={10} display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n          <Spinner />\n        </Box>\n      ) : (\n        data?.blocks?.nodes.map(\n          ({ number, id, timestamp, extrinsics, events }, idx) => (\n            <Flex\n              key={`block-${id}`}\n              alignItems=\"center\"\n              borderBottom=\"1px solid #eee\"\n              justify=\"space-between\"\n              pt={4}\n              pb={4}\n            >\n              <Box>\n                <Link color=\"blue.600\" as={RouterLink} to={`/blocks/${number}`}>\n                  <Heading as=\"h6\" size=\"sm\">\n                    #{number}\n                  </Heading>\n                </Link>\n                <HStack spacing={5} mt={1}>\n                  <Text fontSize=\"sm\" color=\"grey\">\n                    {extrinsics.totalCount} extrinsics\n                  </Text>\n                  <Text fontSize=\"sm\" color=\"grey\">\n                    {events.totalCount} events\n                  </Text>\n                </HStack>\n              </Box>\n              <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                <TimeIcon mr={3} color=\"yellow.600\" />\n                <Text color=\"grey\" fontSize=\"sm\">\n                  {dayjs(timestamp).add(8, \"hours\").toNow(true)}\n                </Text>\n              </Box>\n            </Flex>\n          )\n        )\n      )}\n    </Box>\n  );\n};\n\nexport default BlocksBox;\n","import {\n  Flex,\n  Grid,\n  GridItem,\n  Button,\n  Heading,\n  HStack,\n  Box,\n  Text,\n  Divider,\n  Icon,\n  Link,\n} from \"@chakra-ui/react\";\nimport {\n  MdApps,\n  MdSwapHoriz,\n  MdAccountCircle,\n  MdTrendingUp,\n} from \"react-icons/md\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport ExtrinsicsBox from \"./ExtrinsicsBox\";\nimport BlocksBox from \"./BlocksBox\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { useEffect } from \"react\";\n\nconst GLOBAL_DATA_QUERY = gql`\n  query QueryGlobalData {\n    blocks {\n      totalCount\n    }\n    extrinsics {\n      totalCount\n    }\n    accounts {\n      totalCount\n    }\n    systemTokenTransfers {\n      totalCount\n    }\n  }\n`;\n\nconst StateBox = ({ label, value, icon }) => {\n  return (\n    <Flex align=\"center\" height=\"100%\">\n      <Box>\n        <Icon as={icon} boxSize={6} color=\"teal\" />\n      </Box>\n      <Flex ml={4} align=\"center\" justify=\"space-between\" flex={1}>\n        <Text fontSize=\"sm\" textColor=\"grey\">\n          {label}\n        </Text>\n        <Heading as=\"h6\" size=\"sm\">\n          {value}\n        </Heading>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst Home = () => {\n  const { loading, data, startPolling, stopPolling } =\n    useQuery(GLOBAL_DATA_QUERY);\n\n  useEffect(() => {\n    startPolling(1000);\n    return () => stopPolling();\n  }, [startPolling, stopPolling]);\n\n  return (\n    <div>\n      <Box borderRadius=\"lg\" p={3} background=\"white\" mt=\"-60px\" boxShadow=\"sm\">\n        <Grid templateColumns=\"repeat(49, 1fr)\">\n          <GridItem colSpan={24}>\n            <Grid templateRows=\"repeat(13, 1fr)\" h=\"120px\">\n              <GridItem rowSpan={6}>\n                <StateBox\n                  label=\"Blocks\"\n                  icon={MdApps}\n                  value={data?.blocks.totalCount}\n                />\n              </GridItem>\n              <GridItem rowSpan={1} display=\"flex\" alignItems=\"center\">\n                <Divider orientation=\"horizontal\" />\n              </GridItem>\n              <GridItem rowSpan={6}>\n                <StateBox\n                  label=\"Accounts\"\n                  icon={MdAccountCircle}\n                  value={data?.accounts.totalCount}\n                />\n              </GridItem>\n            </Grid>\n          </GridItem>\n          <GridItem colSpan={1} display=\"flex\" justifyContent=\"center\">\n            <Divider orientation=\"vertical\" />\n          </GridItem>\n          <GridItem colSpan={24}>\n            <Grid templateRows=\"repeat(13, 1fr)\" h=\"120px\">\n              <GridItem rowSpan={6}>\n                <StateBox\n                  label=\"Extrinsics\"\n                  icon={MdTrendingUp}\n                  value={data?.extrinsics.totalCount}\n                />\n              </GridItem>\n              <GridItem rowSpan={1} display=\"flex\" alignItems=\"center\">\n                <Divider orientation=\"horizontal\" />\n              </GridItem>\n              <GridItem rowSpan={6}>\n                <StateBox\n                  label=\"Transfers\"\n                  icon={MdSwapHoriz}\n                  value={data?.systemTokenTransfers.totalCount}\n                />\n              </GridItem>\n            </Grid>\n          </GridItem>\n        </Grid>\n      </Box>\n      <Grid gap={6} templateColumns=\"repeat(6, 1fr)\" mt={4}>\n        <GridItem colSpan={3}>\n          <Flex align=\"center\" justify=\"space-between\" pt={3} pb={4}>\n            <HStack>\n              <MdApps />\n              <Heading as=\"h6\" size=\"xs\">\n                Latest Blocks\n              </Heading>\n            </HStack>\n            <Link as={RouterLink} to={`/blocks`}>\n              <Button colorScheme=\"teal\" size=\"sm\">\n                All\n              </Button>\n            </Link>\n          </Flex>\n          <BlocksBox />\n        </GridItem>\n        <GridItem colSpan={3}>\n          <Flex align=\"center\" justify=\"space-between\" pt={3} pb={4}>\n            <HStack>\n              <MdTrendingUp />\n              <Heading as=\"h6\" size=\"xs\">\n                Latest Extrinsics\n              </Heading>\n            </HStack>\n            <Link as={RouterLink} to={`/extrinsics`}>\n              <Button colorScheme=\"teal\" size=\"sm\">\n                All\n              </Button>\n            </Link>\n          </Flex>\n          <ExtrinsicsBox />\n        </GridItem>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Home;\n","import {\n  Box,\n  Flex,\n  Input,\n  IconButton,\n  Button,\n  Center,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useRef, useState } from \"react\";\nimport { gql, useApolloClient } from \"@apollo/client\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getLinkFromSearch } from \"../libs/searchFuncs\";\n\nconst SearchBox = () => {\n  const navigate = useNavigate();\n  const appoloClient = useApolloClient();\n  const [keyword, setKeyword] = useState(\"\");\n  const [isSearching, setIsSearching] = useState(false);\n\n  const onSearch = async () => {\n    setIsSearching(true);\n    let link = await getLinkFromSearch(keyword, appoloClient);\n    await new Promise((resolve) => setTimeout(() => resolve(0), 500));\n    navigate(link);\n    setIsSearching(false);\n  };\n\n  return (\n    <Flex>\n      <Input\n        color=\"grey\"\n        background=\"white\"\n        onChange={(e) => setKeyword(e.target.value)}\n        size=\"lg\"\n        flex=\"1\"\n        placeholder=\"Search for block/extrinsic/account\"\n        borderRightRadius=\"0\"\n      />\n      <Button\n        colorScheme=\"teal\"\n        size=\"lg\"\n        borderLeftRadius=\"0\"\n        onClick={onSearch}\n        isLoading={isSearching}\n        disabled={isSearching}\n      >\n        Search\n      </Button>\n    </Flex>\n  );\n};\n\nexport default SearchBox;\n","import {\n  Flex,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Button,\n  Input,\n  Box,\n  Text,\n  Link,\n  Icon,\n  Table,\n  Thead,\n  Tbody,\n  Tfoot,\n  Tr,\n  Th,\n  Td,\n  Spinner,\n  HStack,\n  IconButton,\n  Heading,\n} from \"@chakra-ui/react\";\nimport dayjs from \"dayjs\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport {\n  ChevronDownIcon,\n  TimeIcon,\n  ChevronRightIcon,\n  ChevronLeftIcon,\n} from \"@chakra-ui/icons\";\nimport { useState } from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport SearchBox from \"../../components/SearchBox\";\n\nconst BLOCKS_QUERY = gql`\n  query QueryBlocks($offset: Int!, $pageSize: Int!) {\n    blocks(offset: $offset, first: $pageSize, orderBy: NUMBER_DESC) {\n      nodes {\n        id\n        number\n        timestamp\n        extrinsics {\n          totalCount\n        }\n        events {\n          totalCount\n        }\n      }\n      totalCount\n    }\n  }\n`;\n\nconst PAGE_SIZE = 20;\n\nconst Blocks = () => {\n  const [page, setPage] = useState(0);\n  const [isOnTable, setIsOnTable] = useState(false);\n\n  const { loading, data, stopPolling, startPolling } = useQuery(BLOCKS_QUERY, {\n    variables: {\n      offset: page * PAGE_SIZE,\n      pageSize: PAGE_SIZE,\n    },\n  });\n\n  useEffect(() => {\n    startPolling(1000);\n    return () => stopPolling();\n  }, [startPolling, stopPolling]);\n\n  console.log(data);\n\n  return (\n    <div>\n      <SearchBox></SearchBox>\n      <Box p={5} background=\"white\" mt={5} boxShadow=\"sm\" borderRadius=\"lg\">\n        {loading ? (\n          <Box\n            p={10}\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Spinner />\n          </Box>\n        ) : (\n          <Table\n            variant=\"simple\"\n            onMouseEnter={() => setIsOnTable(true)}\n            onMouseLeave={() => setIsOnTable(false)}\n          >\n            <Thead>\n              <Tr>\n                <Th>Block</Th>\n                <Th>Timestamp</Th>\n                <Th>Extrinsics</Th>\n                <Th>Events</Th>\n                <Th>Hash</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {data?.blocks.nodes.map(\n                ({ number, id, timestamp, events, extrinsics }) => (\n                  <Tr key={`block-${id}`}>\n                    <Td>\n                      <Link\n                        as={RouterLink}\n                        to={`/blocks/${number}`}\n                        color=\"blue.600\"\n                      >\n                        <Heading size=\"sm\" as=\"h6\">\n                          #{number}\n                        </Heading>\n                      </Link>\n                    </Td>\n                    <Td>\n                      <HStack spacing={2} mt={1}>\n                        <Icon\n                          as={TimeIcon}\n                          ml={3}\n                          boxSize={4}\n                          color=\"yellow.600\"\n                        />\n                        <Text color=\"grey\" fontSize=\"md\">\n                          {dayjs(timestamp).add(8, \"hours\").toNow(true)}\n                        </Text>\n                      </HStack>\n                    </Td>\n                    <Td>{extrinsics.totalCount}</Td>\n                    <Td>{events.totalCount}</Td>\n                    <Td>\n                      <Link\n                        as={RouterLink}\n                        to={`/blocks/${id}`}\n                        color=\"blue.600\"\n                      >\n                        {id.substr(32)}...\n                      </Link>\n                    </Td>\n                  </Tr>\n                )\n              )}\n            </Tbody>\n          </Table>\n        )}\n      </Box>\n      <Flex align=\"center\" justify=\"space-between\" mt={4}>\n        <div style={{ flexGrow: 1 }} />\n        <HStack>\n          <IconButton\n            aria-label=\"left\"\n            icon={<ChevronLeftIcon />}\n            disabled={page <= 0}\n            onClick={() => setPage(page - 1)}\n          />\n          <Box>\n            {page + 1} of{\" \"}\n            {data ? Math.ceil(data?.blocks.totalCount / PAGE_SIZE) : 1}\n          </Box>\n          <IconButton\n            disabled={page >= Math.ceil(data?.blocks.totalCount / PAGE_SIZE)}\n            aria-label=\"left\"\n            icon={<ChevronRightIcon />}\n            onClick={() => setPage(page + 1)}\n          />\n        </HStack>\n      </Flex>\n    </div>\n  );\n};\n\nexport default Blocks;\n","import { IconButton, Flex, Icon, Text, useClipboard } from \"@chakra-ui/react\";\nimport { CheckIcon, CopyIcon } from \"@chakra-ui/icons\";\nconst CopyButton = ({ value }) => {\n  const { hasCopied, onCopy } = useClipboard(value);\n  return (\n    <IconButton\n      background=\"transparent\"\n      aria-label=\"copy\"\n      onClick={onCopy}\n      ml={1}\n      icon={<Icon as={hasCopied ? CheckIcon : CopyIcon} boxSize={4} />}\n    />\n  );\n};\nexport default CopyButton;\n","import {\n  IconButton,\n  Flex,\n  HStack,\n  Icon,\n  Heading,\n  Input,\n  Button,\n  Box,\n  Tab,\n  Link,\n  Text,\n  CircularProgress,\n  useClipboard,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  Spinner,\n  Tabs,\n  TabList,\n  TabPanels,\n  TabPanel,\n  Tag,\n  CircularProgressLabel,\n} from \"@chakra-ui/react\";\nimport { useState, useEffect } from \"react\";\nimport dayjs from \"dayjs\";\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  TimeIcon,\n  CheckIcon,\n  CopyIcon,\n} from \"@chakra-ui/icons\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { useParams, Link as RouterLink, useNavigate } from \"react-router-dom\";\nimport CopyButton from \"../../components/CopyButton\";\nimport SearchBox from \"../../components/SearchBox\";\n\nconst BLOCK_DETAIL_QUERY_BY_NUMBER = gql`\n  query BlockDetail($number: BigFloat!) {\n    blocks(filter: { number: { equalTo: $number } }) {\n      nodes {\n        id\n        number\n        parentHash\n        specVersion\n        timestamp\n        extrinsics {\n          nodes {\n            section\n            method\n            id\n            args\n            timestamp\n          }\n        }\n        events {\n          nodes {\n            method\n            data\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst BLOCK_DETAIL_QUERY_BY_HASH = gql`\n  query BlockDetail($id: String!) {\n    block(id: $id) {\n      id\n      number\n      parentHash\n      specVersion\n      timestamp\n      extrinsics {\n        nodes {\n          section\n          id\n          method\n          args\n          timestamp\n        }\n      }\n      events {\n        nodes {\n          section\n          method\n          data\n        }\n      }\n    }\n  }\n`;\n\nconst BlockDetail = () => {\n  const { id } = useParams();\n  const [detail, setDetail] = useState<any>();\n  const [blockNumber, setBlockNumber] = useState(\"\");\n  const [isConfirmed, setIsConfirmed] = useState(false);\n  const [secondsPast, setSecondsPast] = useState(0);\n  const [isBN, setIsBN] = useState(false);\n  const navigate = useNavigate();\n\n  const { loading, data, startPolling, stopPolling } = useQuery(\n    isBN ? BLOCK_DETAIL_QUERY_BY_NUMBER : BLOCK_DETAIL_QUERY_BY_HASH,\n    { variables: isBN ? { number: id } : { id } }\n  );\n\n  useEffect(() => {\n    startPolling(1000);\n\n    return () => stopPolling();\n  }, []);\n\n  useEffect(() => {\n    if (!/0x/.test(id) && /^\\d+$/.test(id)) {\n      setBlockNumber(id);\n      setIsBN(true);\n    } else {\n      setIsBN(false);\n      setBlockNumber(\"\");\n    }\n  }, [id]);\n\n  useEffect(() => {\n    if (data) {\n      if (isBN) {\n        setDetail(data.blocks.nodes[0]);\n      } else if (data.block) {\n        setDetail(data.block);\n        setBlockNumber(data.block.number);\n      }\n    } else {\n      setDetail(null);\n    }\n  }, [data, isBN]);\n\n  useEffect(() => {\n    if (detail) {\n      let diffSeconds = dayjs(detail.timestamp)\n        .add(8, \"hours\")\n        .diff(dayjs(), \"seconds\");\n      setSecondsPast(diffSeconds);\n      setIsConfirmed(diffSeconds < -12);\n    }\n  }, [detail]);\n\n  const onPrevBlock = () => {\n    navigate(`/blocks/${parseInt(blockNumber) - 1}`);\n  };\n\n  const onNextBlock = () => {\n    navigate(`/blocks/${parseInt(blockNumber) + 1}`);\n  };\n\n  return (\n    <div>\n      <Flex justify=\"space-between\" align=\"center\">\n        <HStack spacing={4}>\n          <IconButton\n            aria-label=\"prev\"\n            onClick={onPrevBlock}\n            borderRadius=\"md\"\n            icon={<Icon as={ChevronLeftIcon} boxSize={6} />}\n            disabled={loading || !blockNumber || parseInt(blockNumber) <= 1}\n          />\n          <Heading as=\"h6\" size=\"sm\">\n            Block #{blockNumber}\n          </Heading>\n          <IconButton\n            aria-label=\"next\"\n            onClick={onNextBlock}\n            borderRadius=\"md\"\n            icon={<Icon as={ChevronRightIcon} boxSize={6} />}\n            disabled={!blockNumber || loading}\n          />\n        </HStack>\n        <SearchBox></SearchBox>\n      </Flex>\n      <Box mt={5} p={4} background=\"white\" boxShadow=\"sm\" borderRadius=\"lg\">\n        {!detail ? (\n          <Box\n            p={10}\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Spinner />\n          </Box>\n        ) : (\n          <Table variant=\"simple\">\n            <Tbody>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Timestamp\n                  </Heading>\n                </Td>\n                <Td>\n                  {dayjs(detail?.timestamp)\n                    .add(8, \"hours\")\n                    .format(\"YYYY-MM-DD HH:mm:ss\")}\n                </Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Status\n                  </Heading>\n                </Td>\n                <Td>\n                  <HStack spacing={2}>\n                    <CircularProgress\n                      color=\"green.400\"\n                      size=\"28px\"\n                      value={Math.abs((secondsPast * 100) / 12)}\n                    >\n                      {isConfirmed && (\n                        <CircularProgressLabel>\n                          <Icon as={CheckIcon} boxSize={3} color=\"green.400\" />\n                        </CircularProgressLabel>\n                      )}\n                    </CircularProgress>\n                    <Text>{isConfirmed ? \"Confirmed\" : \"Pending\"}</Text>\n                  </HStack>\n                </Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Hash\n                  </Heading>\n                </Td>\n                <Td>\n                  <Flex align=\"center\">\n                    <Text>{detail.id}</Text>\n                    <CopyButton value={detail.id} />\n                  </Flex>\n                </Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Parent hash\n                  </Heading>\n                </Td>\n                <Td>\n                  <Link\n                    as={RouterLink}\n                    to={`/blocks/${detail.parentHash}`}\n                    color=\"blue.600\"\n                  >\n                    {detail.parentHash}\n                  </Link>\n                </Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Spec version\n                  </Heading>\n                </Td>\n                <Td>{detail.specVersion}</Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Block time\n                  </Heading>\n                </Td>\n                <Td>\n                  <HStack spacing={2} mt={1}>\n                    <Icon as={TimeIcon} ml={3} boxSize={3} color=\"yellow.600\" />\n                    <Text color=\"grey\" fontSize=\"sm\">\n                      {dayjs(detail.timestamp).add(8, \"hours\").toNow(true)}\n                    </Text>\n                  </HStack>\n                </Td>\n              </Tr>\n            </Tbody>\n          </Table>\n        )}\n      </Box>\n      <Box mt={5} p={4} background=\"white\" boxShadow=\"sm\" borderRadius=\"lg\">\n        <Tabs>\n          <TabList>\n            <Tab>Extrinsics</Tab>\n            <Tab>Logs({data?.events?.totalCount || 0})</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              {!detail ? (\n                <Box\n                  p={10}\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  justifyContent=\"center\"\n                >\n                  <Spinner />\n                </Box>\n              ) : (\n                <Table>\n                  <Thead background=\"teal.50\">\n                    <Tr>\n                      <Th></Th>\n                      <Th>Hash</Th>\n                      <Th>Method</Th>\n                      <Th>Time</Th>\n                    </Tr>\n                  </Thead>\n                  <Tbody>\n                    {detail.extrinsics.nodes.map(\n                      ({ id, timestamp, section, method }, idx) => (\n                        <Tr key={`extrinsic-${id}`}>\n                          <Td>{idx}</Td>\n                          <Td>\n                            <Link\n                              as={RouterLink}\n                              to={`/extrinsics/${id}`}\n                              color=\"blue.600\"\n                            >\n                              {id.substr(0, 32)}...\n                            </Link>\n                          </Td>\n                          <Td>\n                            <Tag size=\"sm\" colorScheme=\"cyan\">\n                              {section}.{method}\n                            </Tag>\n                          </Td>\n                          <Td>\n                            <HStack spacing={2} mt={1}>\n                              <Icon\n                                as={TimeIcon}\n                                ml={3}\n                                boxSize={3}\n                                color=\"yellow.600\"\n                              />\n                              <Text color=\"grey\" fontSize=\"sm\">\n                                {dayjs(timestamp).add(8, \"hours\").toNow(true)}\n                              </Text>\n                            </HStack>\n                          </Td>\n                        </Tr>\n                      )\n                    )}\n                  </Tbody>\n                </Table>\n              )}\n            </TabPanel>\n            <TabPanel>\n              {!detail ? (\n                <Box\n                  p={10}\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  justifyContent=\"center\"\n                >\n                  <Spinner />\n                </Box>\n              ) : (\n                <Table>\n                  <Thead background=\"teal.50\">\n                    <Tr>\n                      <Th></Th>\n                      <Th>Method</Th>\n                      <Th>Data</Th>\n                    </Tr>\n                  </Thead>\n                  <Tbody>\n                    {detail.events.nodes.map(\n                      ({ section, method, data }, idx) => (\n                        <Tr key={`extrinsic-${id}`}>\n                          <Td>{idx}</Td>\n                          <Td>\n                            <Tag size=\"sm\" colorScheme=\"cyan\">\n                              {section}.{method}\n                            </Tag>\n                          </Td>\n                          <Td>{data}</Td>\n                        </Tr>\n                      )\n                    )}\n                  </Tbody>\n                </Table>\n              )}\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </div>\n  );\n};\n\nexport default BlockDetail;\n","import {\n  Flex,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Button,\n  Input,\n  Box,\n  Text,\n  Link,\n  Icon,\n  Table,\n  Thead,\n  Tbody,\n  Tfoot,\n  Tr,\n  Th,\n  Td,\n  Spinner,\n  HStack,\n  IconButton,\n  Heading,\n} from \"@chakra-ui/react\";\nimport dayjs from \"dayjs\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport {\n  ChevronDownIcon,\n  TimeIcon,\n  ChevronRightIcon,\n  ChevronLeftIcon,\n} from \"@chakra-ui/icons\";\nimport { useState } from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport SearchBox from \"../../components/SearchBox\";\nimport { getBalanceOf } from \"libs/polkadotApi\";\nimport CopyButton from \"../../components/CopyButton\";\n\nconst ACCOUNT_QUERY = gql`\n  query QueryAccounts($offset: Int!, $pageSize: Int!) {\n    accounts(offset: $offset, first: $pageSize, orderBy: ID_ASC) {\n      nodes {\n        id\n        calls {\n          totalCount\n        }\n        systemTokenTransfersByFromId {\n          totalCount\n        }\n        systemTokenTransfersByToId {\n          totalCount\n        }\n      }\n      totalCount\n    }\n  }\n`;\n\nconst PAGE_SIZE = 20;\n\nconst Accounts = () => {\n  const [page, setPage] = useState(0);\n  const [accounts, setAccounts] = useState<any[]>([]);\n  const [isOnTable, setIsOnTable] = useState(false);\n\n  const { loading, data, stopPolling, startPolling } = useQuery(ACCOUNT_QUERY, {\n    variables: {\n      offset: page * PAGE_SIZE,\n      pageSize: PAGE_SIZE,\n    },\n  });\n\n  useEffect(() => {\n    startPolling(15 * 1000);\n    return () => stopPolling();\n  }, [startPolling, stopPolling]);\n\n  useEffect(() => {\n    (async () => {\n      if (data) {\n        const accounts = await Promise.all(\n          data.accounts.nodes.map(async (account) => {\n            const balance = await getBalanceOf(account.id);\n            return { ...account, balance };\n          })\n        );\n        setAccounts(accounts);\n      }\n    })();\n  }, [data]);\n\n  return (\n    <div>\n      <SearchBox></SearchBox>\n      <Box p={5} background=\"white\" mt={5} boxShadow=\"sm\" borderRadius=\"lg\">\n        {loading ? (\n          <Box\n            p={10}\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Spinner />\n          </Box>\n        ) : (\n          <Table\n            variant=\"simple\"\n            onMouseEnter={() => setIsOnTable(true)}\n            onMouseLeave={() => setIsOnTable(false)}\n          >\n            <Thead>\n              <Tr>\n                <Th>ID</Th>\n                <Th>Balance</Th>\n                <Th>Transfers</Th>\n                <Th>Calls</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {accounts.map(\n                ({\n                  id,\n                  balance,\n                  calls,\n                  systemTokenTransfersByFromId,\n                  systemTokenTransfersByToId,\n                }) => (\n                  <Tr key={`account-${id}`}>\n                    <Td>\n                      <Flex align=\"center\">\n                        <Link\n                          as={RouterLink}\n                          to={`/accounts/${id}`}\n                          color=\"blue.600\"\n                        >\n                          <Heading size=\"sm\" as=\"h6\">\n                            {id.slice(0, 18)}...\n                          </Heading>\n                        </Link>\n                        <CopyButton value={id} />\n                      </Flex>\n                    </Td>\n                    <Td>{balance}</Td>\n                    <Td>\n                      {systemTokenTransfersByFromId.totalCount +\n                        systemTokenTransfersByToId.totalCount}\n                    </Td>\n                    <Td>{calls.totalCount}</Td>\n                  </Tr>\n                )\n              )}\n            </Tbody>\n          </Table>\n        )}\n      </Box>\n      <Flex align=\"center\" justify=\"space-between\" mt={4}>\n        <div style={{ flexGrow: 1 }} />\n        <HStack>\n          <IconButton\n            aria-label=\"left\"\n            icon={<ChevronLeftIcon />}\n            disabled={page <= 0}\n            onClick={() => setPage(page - 1)}\n          />\n          <Box>\n            {page + 1} of{\" \"}\n            {data ? Math.ceil(data?.accounts.totalCount / PAGE_SIZE) : 1}\n          </Box>\n          <IconButton\n            disabled={page >= Math.ceil(data?.accounts.totalCount / PAGE_SIZE)}\n            aria-label=\"left\"\n            icon={<ChevronRightIcon />}\n            onClick={() => setPage(page + 1)}\n          />\n        </HStack>\n      </Flex>\n    </div>\n  );\n};\n\nexport default Accounts;\n","import {\n  IconButton,\n  Flex,\n  HStack,\n  Icon,\n  Heading,\n  Input,\n  Button,\n  Box,\n  Tab,\n  Link,\n  Text,\n  CircularProgress,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  Spinner,\n  Tabs,\n  TabList,\n  TabPanels,\n  TabPanel,\n  Tag,\n  CircularProgressLabel,\n} from \"@chakra-ui/react\";\nimport Hash from \"components/Hash\";\nimport { useState, useEffect } from \"react\";\nimport dayjs from \"dayjs\";\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  TimeIcon,\n  CheckIcon,\n} from \"@chakra-ui/icons\";\nimport { getBalanceOf } from \"../../libs/polkadotApi\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { useParams, Link as RouterLink, useNavigate } from \"react-router-dom\";\nimport { getAmountHuman } from \"../../libs/polkadotApi\";\nimport CopyButton from \"../../components/CopyButton\";\nimport SearchBox from \"../../components/SearchBox\";\n\nconst CALLS_QUERY = gql`\n  query AccountCalls($id: String!, $offset: Int!, $pageSize: Int!) {\n    account(id: $id) {\n      calls(offset: $offset, first: $pageSize, orderBy: TIMESTAMP_DESC) {\n        nodes {\n          id\n          section\n          method\n          args\n          timestamp\n          isSuccess\n          signerId\n          extrinsicId\n          parentCallId\n        }\n        totalCount\n      }\n    }\n  }\n`;\n\nconst TRANSFERS_OUT_QUERY = gql`\n  query AccountTransfersOut($id: String!, $offset: Int!, $pageSize: Int!) {\n    account(id: $id) {\n      systemTokenTransfersByFromId(\n        offset: $offset\n        first: $pageSize\n        orderBy: TIMESTAMP_DESC\n      ) {\n        nodes {\n          id\n          fromId\n          toId\n          amount\n          extrinsicId\n          timestamp\n        }\n        totalCount\n      }\n    }\n  }\n`;\n\nconst TRANSFERS_IN_QUERY = gql`\n  query AccountTransfersIn($id: String!, $offset: Int!, $pageSize: Int!) {\n    account(id: $id) {\n      systemTokenTransfersByToId(\n        offset: $offset\n        first: $pageSize\n        orderBy: TIMESTAMP_DESC\n      ) {\n        nodes {\n          id\n          fromId\n          toId\n          amount\n          extrinsicId\n          timestamp\n        }\n        totalCount\n      }\n    }\n  }\n`;\n\nconst PAGE_SIZE = 20;\n\nconst AccountDetail = () => {\n  const { id } = useParams();\n  const [detail, setDetail] = useState<any>();\n  const [callsPage, setCallsPage] = useState(0);\n  const [transfersOutPage, setTransfersOutPage] = useState(0);\n  const [transfersInPage, setTransfersInPage] = useState(0);\n\n  const callsQuery = useQuery(CALLS_QUERY, {\n    variables: { id, offset: callsPage * PAGE_SIZE, pageSize: PAGE_SIZE },\n  });\n  const transfersOutQuery = useQuery(TRANSFERS_OUT_QUERY, {\n    variables: { id, offset: callsPage * PAGE_SIZE, pageSize: PAGE_SIZE },\n  });\n  const transfersInQuery = useQuery(TRANSFERS_IN_QUERY, {\n    variables: { id, offset: callsPage * PAGE_SIZE, pageSize: PAGE_SIZE },\n  });\n\n  useEffect(() => {\n    callsQuery.startPolling(30 * 1000);\n    transfersOutQuery.startPolling(30 * 1000);\n    transfersInQuery.startPolling(30 * 1000);\n    return () => {\n      callsQuery.stopPolling();\n      transfersOutQuery.stopPolling();\n      transfersInQuery.stopPolling();\n    };\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      if (callsQuery.data && transfersOutQuery.data && transfersInQuery.data) {\n        const balance = await getBalanceOf(id);\n        const account = {\n          ...callsQuery.data.account,\n          ...transfersOutQuery.data.account,\n          ...transfersInQuery.data.account,\n          balance,\n        };\n        console.log(\"account:\", account);\n        setDetail(account);\n      } else {\n        setDetail(null);\n      }\n    })();\n  }, [callsQuery, transfersOutQuery, transfersInQuery]);\n\n  return (\n    <div>\n      <Flex justify=\"space-between\" align=\"center\">\n        <Heading as=\"h6\" size=\"sm\">\n          Account Detail\n        </Heading>\n        <SearchBox></SearchBox>\n      </Flex>\n      <Box mt={5} p={4} background=\"white\" boxShadow=\"sm\" borderRadius=\"lg\">\n        {!detail ? (\n          <Box\n            p={10}\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Spinner />\n          </Box>\n        ) : (\n          <Table variant=\"simple\">\n            <Tbody>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    ID\n                  </Heading>\n                </Td>\n                <Td>\n                  <Flex align=\"center\">\n                    <Text>{id}</Text>\n                    <CopyButton value={id} />\n                  </Flex>\n                </Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Balance\n                  </Heading>\n                </Td>\n                <Td>{detail.balance}</Td>\n              </Tr>\n            </Tbody>\n          </Table>\n        )}\n      </Box>\n      <Box mt={5} p={4} background=\"white\" boxShadow=\"sm\" borderRadius=\"lg\">\n        <Tabs>\n          <TabList>\n            <Tab>Calls({detail?.calls?.totalCount || 0})</Tab>\n            <Tab>\n              Transfers Out(\n              {detail?.systemTokenTransfersByFromId?.totalCount || 0})\n            </Tab>\n            <Tab>\n              Transfers In(\n              {detail?.systemTokenTransfersByToId?.totalCount || 0})\n            </Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              {!detail ? (\n                <Box\n                  p={10}\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  justifyContent=\"center\"\n                >\n                  <Spinner />\n                </Box>\n              ) : (\n                <Table>\n                  <Thead background=\"teal.50\">\n                    <Tr>\n                      <Th>ID</Th>\n                      <Th>Method</Th>\n                      <Th>Signer Id</Th>\n                      <Th>Extrinsic Id</Th>\n                      <Th>Time</Th>\n                    </Tr>\n                  </Thead>\n                  <Tbody>\n                    {detail.calls.nodes.map(\n                      (\n                        {\n                          id,\n                          section,\n                          method,\n                          signerId,\n                          extrinsicId,\n                          timestamp,\n                        },\n                        idx\n                      ) => (\n                        <Tr key={`account-${id}`}>\n                          <Td>\n                            <Flex align=\"center\">\n                              <Text>{id.slice(0, 18)}...</Text>\n                              <CopyButton value={id} />\n                            </Flex>\n                          </Td>\n                          <Td>\n                            <Tag size=\"sm\" colorScheme=\"cyan\">\n                              {section}.{method}\n                            </Tag>\n                          </Td>\n                          <Td>\n                            <Link\n                              as={RouterLink}\n                              to={`/accounts/${signerId}`}\n                              color=\"blue.600\"\n                            >\n                              {signerId.substr(0, 10)}...\n                            </Link>\n                          </Td>\n                          <Td>\n                            <Link\n                              as={RouterLink}\n                              to={`/extrinsics/${extrinsicId}`}\n                              color=\"blue.600\"\n                            >\n                              {extrinsicId.substr(0, 10)}...\n                            </Link>\n                          </Td>\n                          <Td>\n                            <HStack spacing={2} mt={1}>\n                              <Icon\n                                as={TimeIcon}\n                                ml={3}\n                                boxSize={3}\n                                color=\"yellow.600\"\n                              />\n                              <Text color=\"grey\" fontSize=\"sm\">\n                                {dayjs(timestamp).add(8, \"hours\").toNow(true)}\n                              </Text>\n                            </HStack>\n                          </Td>\n                        </Tr>\n                      )\n                    )}\n                  </Tbody>\n                </Table>\n              )}\n              <Flex align=\"center\" justify=\"space-between\" mt={4}>\n                <div style={{ flexGrow: 1 }} />\n                <HStack>\n                  <IconButton\n                    aria-label=\"left\"\n                    icon={<ChevronLeftIcon />}\n                    disabled={callsPage <= 0}\n                    onClick={() => setCallsPage(callsPage - 1)}\n                  />\n                  <Box>\n                    {callsPage + 1} of{\" \"}\n                    {detail\n                      ? Math.ceil(detail?.calls.totalCount / PAGE_SIZE)\n                      : 1}\n                  </Box>\n                  <IconButton\n                    disabled={\n                      callsPage >=\n                      Math.ceil(detail?.calls.totalCount / PAGE_SIZE)\n                    }\n                    aria-label=\"left\"\n                    icon={<ChevronRightIcon />}\n                    onClick={() => setCallsPage(callsPage + 1)}\n                  />\n                </HStack>\n              </Flex>\n            </TabPanel>\n            <TabPanel>\n              {!detail ? (\n                <Box\n                  p={10}\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  justifyContent=\"center\"\n                >\n                  <Spinner />\n                </Box>\n              ) : (\n                <Table>\n                  <Thead background=\"teal.50\">\n                    <Tr>\n                      <Th>ID</Th>\n                      <Th>From</Th>\n                      <Th>To</Th>\n                      <Th>Amount</Th>\n                      <Th>extrinsic</Th>\n                      <Th>Time</Th>\n                    </Tr>\n                  </Thead>\n                  <Tbody>\n                    {detail.systemTokenTransfersByFromId.nodes.map(\n                      (\n                        { id, fromId, toId, amount, extrinsicId, timestamp },\n                        idx\n                      ) => (\n                        <Tr key={`account-${id}`}>\n                          <Td>\n                            <Link\n                              as={RouterLink}\n                              to={`/transfers/${id}`}\n                              color=\"blue.600\"\n                            >\n                              {id}\n                            </Link>\n                          </Td>\n                          <Td>\n                            <Link\n                              as={RouterLink}\n                              to={`/accounts/${fromId}`}\n                              color=\"blue.600\"\n                            >\n                              {fromId.substr(0, 10)}...\n                            </Link>\n                          </Td>\n                          <Td>\n                            <Link\n                              as={RouterLink}\n                              to={`/accounts/${toId}`}\n                              color=\"blue.600\"\n                            >\n                              {toId.substr(0, 10)}...\n                            </Link>\n                          </Td>\n                          <Td>{getAmountHuman(amount)}</Td>\n                          <Td>\n                            <Link\n                              as={RouterLink}\n                              to={`/extrinsics/${extrinsicId}`}\n                              color=\"blue.600\"\n                            >\n                              {extrinsicId.substr(0, 10)}...\n                            </Link>\n                          </Td>\n                          <Td>\n                            <HStack spacing={2} mt={1}>\n                              <Icon\n                                as={TimeIcon}\n                                ml={3}\n                                boxSize={3}\n                                color=\"yellow.600\"\n                              />\n                              <Text color=\"grey\" fontSize=\"sm\">\n                                {dayjs(timestamp).add(8, \"hours\").toNow(true)}\n                              </Text>\n                            </HStack>\n                          </Td>\n                        </Tr>\n                      )\n                    )}\n                  </Tbody>\n                </Table>\n              )}\n              <Flex align=\"center\" justify=\"space-between\" mt={4}>\n                <div style={{ flexGrow: 1 }} />\n                <HStack>\n                  <IconButton\n                    aria-label=\"left\"\n                    icon={<ChevronLeftIcon />}\n                    disabled={transfersOutPage <= 0}\n                    onClick={() => setTransfersOutPage(transfersOutPage - 1)}\n                  />\n                  <Box>\n                    {transfersOutPage + 1} of{\" \"}\n                    {detail\n                      ? Math.ceil(\n                          detail?.systemTokenTransfersByFromId.totalCount /\n                            PAGE_SIZE\n                        )\n                      : 1}\n                  </Box>\n                  <IconButton\n                    disabled={\n                      transfersOutPage >=\n                      Math.ceil(\n                        detail?.systemTokenTransfersByFromId.totalCount /\n                          PAGE_SIZE\n                      )\n                    }\n                    aria-label=\"left\"\n                    icon={<ChevronRightIcon />}\n                    onClick={() => setTransfersOutPage(transfersOutPage + 1)}\n                  />\n                </HStack>\n              </Flex>\n            </TabPanel>\n            <TabPanel>\n              {!detail ? (\n                <Box\n                  p={10}\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  justifyContent=\"center\"\n                >\n                  <Spinner />\n                </Box>\n              ) : (\n                <Table>\n                  <Thead background=\"teal.50\">\n                    <Tr>\n                      <Th>ID</Th>\n                      <Th>From</Th>\n                      <Th>To</Th>\n                      <Th>Amount</Th>\n                      <Th>extrinsic</Th>\n                      <Th>Time</Th>\n                    </Tr>\n                  </Thead>\n                  <Tbody>\n                    {detail.systemTokenTransfersByToId.nodes.map(\n                      (\n                        { id, fromId, toId, amount, extrinsicId, timestamp },\n                        idx\n                      ) => (\n                        <Tr key={`account-${id}`}>\n                          <Td>\n                            <Link\n                              as={RouterLink}\n                              to={`/transfers/${id}`}\n                              color=\"blue.600\"\n                            >\n                              {id}\n                            </Link>\n                          </Td>\n                          <Td>\n                            <Link\n                              as={RouterLink}\n                              to={`/accounts/${fromId}`}\n                              color=\"blue.600\"\n                            >\n                              {fromId.substr(0, 10)}...\n                            </Link>\n                          </Td>\n                          <Td>\n                            <Link\n                              as={RouterLink}\n                              to={`/accounts/${toId}`}\n                              color=\"blue.600\"\n                            >\n                              {toId.substr(0, 10)}...\n                            </Link>\n                          </Td>\n                          <Td>{getAmountHuman(amount)}</Td>\n                          <Td>\n                            <Link\n                              as={RouterLink}\n                              to={`/extrinsics/${extrinsicId}`}\n                              color=\"blue.600\"\n                            >\n                              {extrinsicId.substr(0, 10)}...\n                            </Link>\n                          </Td>\n                          <Td>\n                            <HStack spacing={2} mt={1}>\n                              <Icon\n                                as={TimeIcon}\n                                ml={3}\n                                boxSize={3}\n                                color=\"yellow.600\"\n                              />\n                              <Text color=\"grey\" fontSize=\"sm\">\n                                {dayjs(timestamp).add(8, \"hours\").toNow(true)}\n                              </Text>\n                            </HStack>\n                          </Td>\n                        </Tr>\n                      )\n                    )}\n                  </Tbody>\n                </Table>\n              )}\n              <Flex align=\"center\" justify=\"space-between\" mt={4}>\n                <div style={{ flexGrow: 1 }} />\n                <HStack>\n                  <IconButton\n                    aria-label=\"left\"\n                    icon={<ChevronLeftIcon />}\n                    disabled={transfersInPage <= 0}\n                    onClick={() => setTransfersInPage(transfersInPage - 1)}\n                  />\n                  <Box>\n                    {transfersInPage + 1} of{\" \"}\n                    {detail\n                      ? Math.ceil(\n                          detail?.systemTokenTransfersByToId.totalCount /\n                            PAGE_SIZE\n                        )\n                      : 1}\n                  </Box>\n                  <IconButton\n                    disabled={\n                      transfersInPage >=\n                      Math.ceil(\n                        detail?.systemTokenTransfersByToId.totalCount /\n                          PAGE_SIZE\n                      )\n                    }\n                    aria-label=\"left\"\n                    icon={<ChevronRightIcon />}\n                    onClick={() => setTransfersInPage(transfersInPage + 1)}\n                  />\n                </HStack>\n              </Flex>\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </div>\n  );\n};\n\nexport default AccountDetail;\n","import {\n  Flex,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Button,\n  Input,\n  Box,\n  Text,\n  Link,\n  Icon,\n  Table,\n  Thead,\n  Tbody,\n  Tfoot,\n  Tr,\n  Th,\n  Td,\n  Spinner,\n  HStack,\n  IconButton,\n  Heading,\n} from \"@chakra-ui/react\";\nimport dayjs from \"dayjs\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport {\n  ChevronDownIcon,\n  TimeIcon,\n  ChevronRightIcon,\n  ChevronLeftIcon,\n} from \"@chakra-ui/icons\";\nimport { useState } from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport SearchBox from \"../../components/SearchBox\";\nimport { getAmountHuman } from \"libs/polkadotApi\";\nimport CopyButton from \"../../components/CopyButton\";\n\nconst ACCOUNT_QUERY = gql`\n  query QueryAccounts($offset: Int!, $pageSize: Int!) {\n    systemTokenTransfers(offset: $offset, first: $pageSize, orderBy: ID_ASC) {\n      nodes {\n        id\n        fromId\n        toId\n        amount\n        timestamp\n        extrinsicId\n      }\n      totalCount\n    }\n  }\n`;\n\nconst PAGE_SIZE = 20;\n\nconst Transfers = () => {\n  const [page, setPage] = useState(0);\n  const [isOnTable, setIsOnTable] = useState(false);\n\n  const { loading, data, stopPolling, startPolling } = useQuery(ACCOUNT_QUERY, {\n    variables: {\n      offset: page * PAGE_SIZE,\n      pageSize: PAGE_SIZE,\n    },\n  });\n\n  useEffect(() => {\n    startPolling(15 * 1000);\n    return () => stopPolling();\n  }, [startPolling, stopPolling]);\n\n  return (\n    <div>\n      <SearchBox></SearchBox>\n      <Box p={5} background=\"white\" mt={5} boxShadow=\"sm\" borderRadius=\"lg\">\n        {loading ? (\n          <Box\n            p={10}\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Spinner />\n          </Box>\n        ) : (\n          <Table\n            variant=\"simple\"\n            onMouseEnter={() => setIsOnTable(true)}\n            onMouseLeave={() => setIsOnTable(false)}\n          >\n            <Thead>\n              <Tr>\n                <Th>ID</Th>\n                <Th>From</Th>\n                <Th>To</Th>\n                <Th>Amount</Th>\n                <Th>Extrinsic</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {data?.systemTokenTransfers.nodes.map(\n                ({ id, fromId, toId, amount, extrinsicId, timestamp }) => (\n                  <Tr key={`transfer-${id}`}>\n                    <Td>\n                      <Link\n                        as={RouterLink}\n                        to={`/transfers/${id}`}\n                        color=\"blue.600\"\n                      >\n                        {id}\n                      </Link>\n                    </Td>\n                    <Td>\n                      <Link\n                        as={RouterLink}\n                        to={`/accounts/${fromId}`}\n                        color=\"blue.600\"\n                      >\n                        {fromId.substr(0, 10)}...\n                      </Link>\n                    </Td>\n                    <Td>\n                      <Link\n                        as={RouterLink}\n                        to={`/accounts/${toId}`}\n                        color=\"blue.600\"\n                      >\n                        {toId.substr(0, 10)}...\n                      </Link>\n                    </Td>\n                    <Td>{getAmountHuman(amount)}</Td>\n                    <Td>\n                      <Link\n                        as={RouterLink}\n                        to={`/extrinsics/${extrinsicId}`}\n                        color=\"blue.600\"\n                      >\n                        {extrinsicId.substr(0, 10)}...\n                      </Link>\n                    </Td>\n                    <Td>\n                      <HStack spacing={2} mt={1}>\n                        <Icon\n                          as={TimeIcon}\n                          ml={3}\n                          boxSize={3}\n                          color=\"yellow.600\"\n                        />\n                        <Text color=\"grey\" fontSize=\"sm\">\n                          {dayjs(timestamp).add(8, \"hours\").toNow(true)}\n                        </Text>\n                      </HStack>\n                    </Td>\n                  </Tr>\n                )\n              )}\n            </Tbody>\n          </Table>\n        )}\n      </Box>\n      <Flex align=\"center\" justify=\"space-between\" mt={4}>\n        <div style={{ flexGrow: 1 }} />\n        <HStack>\n          <IconButton\n            aria-label=\"left\"\n            icon={<ChevronLeftIcon />}\n            disabled={page <= 0}\n            onClick={() => setPage(page - 1)}\n          />\n          <Box>\n            {page + 1} of{\" \"}\n            {data\n              ? Math.ceil(data?.systemTokenTransfers.totalCount / PAGE_SIZE)\n              : 1}\n          </Box>\n          <IconButton\n            disabled={\n              page >=\n              Math.ceil(data?.systemTokenTransfers.totalCount / PAGE_SIZE)\n            }\n            aria-label=\"left\"\n            icon={<ChevronRightIcon />}\n            onClick={() => setPage(page + 1)}\n          />\n        </HStack>\n      </Flex>\n    </div>\n  );\n};\n\nexport default Transfers;\n","import {\n  IconButton,\n  Flex,\n  HStack,\n  Icon,\n  Heading,\n  Input,\n  Button,\n  Box,\n  Tab,\n  Link,\n  Text,\n  CircularProgress,\n  useClipboard,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  Spinner,\n  Tabs,\n  TabList,\n  TabPanels,\n  TabPanel,\n  Tag,\n  CircularProgressLabel,\n} from \"@chakra-ui/react\";\nimport { useState, useEffect } from \"react\";\nimport dayjs from \"dayjs\";\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  TimeIcon,\n  CheckIcon,\n  CopyIcon,\n} from \"@chakra-ui/icons\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { useParams, Link as RouterLink, useNavigate } from \"react-router-dom\";\nimport { getAmountHuman } from \"../../libs/polkadotApi\";\nimport CopyButton from \"../../components/CopyButton\";\nimport SearchBox from \"../../components/SearchBox\";\n\nconst BLOCK_DETAIL_QUERY_BY_HASH = gql`\n  query TransferDetail($id: String!) {\n    systemTokenTransfer(id: $id) {\n      id\n      fromId\n      toId\n      amount\n      timestamp\n      extrinsicId\n      extrinsic {\n        block {\n          id\n          number\n        }\n      }\n    }\n  }\n`;\n\nconst TransferDetail = () => {\n  const { id } = useParams();\n  const [detail, setDetail] = useState<any>();\n  const [isConfirmed, setIsConfirmed] = useState(false);\n  const [secondsPast, setSecondsPast] = useState(0);\n  const navigate = useNavigate();\n\n  const { loading, data, startPolling, stopPolling } = useQuery(\n    BLOCK_DETAIL_QUERY_BY_HASH,\n    { variables: { id } }\n  );\n\n  useEffect(() => {\n    startPolling(20 * 1000);\n    return () => stopPolling();\n  }, []);\n\n  useEffect(() => {\n    if (data) {\n      setDetail(data.systemTokenTransfer);\n    } else {\n      setDetail(null);\n    }\n  }, [data]);\n\n  useEffect(() => {\n    if (detail) {\n      let diffSeconds = dayjs(detail.timestamp)\n        .add(8, \"hours\")\n        .diff(dayjs(), \"seconds\");\n      setSecondsPast(diffSeconds);\n      setIsConfirmed(diffSeconds < -12);\n    }\n  }, [detail]);\n\n  return (\n    <div>\n      <Flex justify=\"space-between\" align=\"center\">\n        <Heading as=\"h6\" size=\"sm\">\n          Transfer Detail\n        </Heading>\n        <SearchBox></SearchBox>\n      </Flex>\n      <Box mt={5} p={4} background=\"white\" boxShadow=\"sm\" borderRadius=\"lg\">\n        {!detail ? (\n          <Box\n            p={10}\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Spinner />\n          </Box>\n        ) : (\n          <Table variant=\"simple\">\n            <Tbody>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    ID\n                  </Heading>\n                </Td>\n                <Td>{id}</Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Timestamp\n                  </Heading>\n                </Td>\n                <Td>{detail.timestamp}</Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Status\n                  </Heading>\n                </Td>\n                <Td>\n                  <HStack spacing={2}>\n                    <CircularProgress\n                      color=\"green.400\"\n                      size=\"28px\"\n                      value={Math.abs((secondsPast * 100) / 12)}\n                    >\n                      {isConfirmed && (\n                        <CircularProgressLabel>\n                          <Icon as={CheckIcon} boxSize={3} color=\"green.400\" />\n                        </CircularProgressLabel>\n                      )}\n                    </CircularProgress>\n                    <Text>{isConfirmed ? \"Confirmed\" : \"Pending\"}</Text>\n                  </HStack>\n                </Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    From\n                  </Heading>\n                </Td>\n                <Td>\n                  <Flex align=\"center\">\n                    <Link\n                      as={RouterLink}\n                      to={`/accounts/${detail.fromId}`}\n                      color=\"blue.600\"\n                    >\n                      {detail.fromId}\n                    </Link>\n                    <CopyButton value={detail.fromId} />\n                  </Flex>\n                </Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    To\n                  </Heading>\n                </Td>\n                <Td>\n                  <Flex align=\"center\">\n                    <Link\n                      as={RouterLink}\n                      to={`/accounts/${detail.toId}`}\n                      color=\"blue.600\"\n                    >\n                      {detail.toId}\n                    </Link>\n                    <CopyButton value={detail.toId} />\n                  </Flex>\n                </Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Amount\n                  </Heading>\n                </Td>\n                <Td>{getAmountHuman(detail.amount)}</Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Block Hash\n                  </Heading>\n                </Td>\n                <Td>\n                  <Flex align=\"center\">\n                    <Link\n                      as={RouterLink}\n                      to={`/blocks/${detail.extrinsic.block.id}`}\n                      color=\"blue.600\"\n                    >\n                      {detail.extrinsic.block.id}\n                    </Link>\n                    <CopyButton value={detail.extrinsic.block.id} />\n                  </Flex>\n                </Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Block Number\n                  </Heading>\n                </Td>\n                <Td>{detail.extrinsic.block.number}</Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Block time\n                  </Heading>\n                </Td>\n                <Td>\n                  <HStack spacing={2} mt={1}>\n                    <Icon as={TimeIcon} ml={3} boxSize={3} color=\"yellow.600\" />\n                    <Text color=\"grey\" fontSize=\"sm\">\n                      {dayjs(detail.timestamp).add(8, \"hours\").toNow(true)}\n                    </Text>\n                  </HStack>\n                </Td>\n              </Tr>\n            </Tbody>\n          </Table>\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default TransferDetail;\n","import {\n  IconButton,\n  Flex,\n  HStack,\n  Icon,\n  Heading,\n  Input,\n  Button,\n  Box,\n  Tab,\n  Link,\n  Text,\n  CircularProgress,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  Spinner,\n  Tabs,\n  TabList,\n  TabPanels,\n  TabPanel,\n  Tag,\n  CircularProgressLabel,\n} from \"@chakra-ui/react\";\nimport Hash from \"components/Hash\";\nimport { useState, useEffect } from \"react\";\nimport dayjs from \"dayjs\";\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  TimeIcon,\n  CheckIcon,\n} from \"@chakra-ui/icons\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { useParams, Link as RouterLink, useNavigate } from \"react-router-dom\";\nimport SearchBox from \"../../components/SearchBox\";\n\nconst EXTRINSIC_DETAIL_QUERY = gql`\n  query ExtrinsicDetail($id: String!) {\n    extrinsic(id: $id) {\n      id\n      timestamp\n      signature\n      signer {\n        id\n      }\n      nonce\n      block {\n        number\n      }\n      section\n      method\n      events {\n        nodes {\n          section\n          method\n          data\n        }\n      }\n    }\n  }\n`;\n\nconst ExtrinsicDetail = () => {\n  const { id } = useParams();\n  const [detail, setDetail] = useState<any>();\n\n  const { loading, data, startPolling, stopPolling } = useQuery(\n    EXTRINSIC_DETAIL_QUERY,\n    { variables: { id } }\n  );\n\n  useEffect(() => {\n    startPolling(1000);\n    return () => stopPolling();\n  }, []);\n\n  useEffect(() => {\n    if (data) {\n      setDetail(data.extrinsic);\n    } else {\n      setDetail(null);\n    }\n  }, [data]);\n\n  return (\n    <div>\n      <Flex justify=\"space-between\" align=\"center\">\n        <Heading as=\"h6\" size=\"sm\">\n          Extrinsic Detail\n        </Heading>\n        <SearchBox></SearchBox>\n      </Flex>\n      <Box mt={5} p={4} background=\"white\" boxShadow=\"sm\" borderRadius=\"lg\">\n        {!detail ? (\n          <Box\n            p={10}\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Spinner />\n          </Box>\n        ) : (\n          <Table variant=\"simple\">\n            <Tbody>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Timestamp\n                  </Heading>\n                </Td>\n                <Td>\n                  {dayjs(detail?.timestamp)\n                    .add(8, \"hours\")\n                    .format(\"YYYY-MM-DD HH:mm:ss\")}\n                </Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Block\n                  </Heading>\n                </Td>\n                <Td>\n                  <Link\n                    as={RouterLink}\n                    to={`/blocks/${detail.block.number}`}\n                    color=\"blue.600\"\n                  >\n                    <Heading as=\"h6\" size=\"sm\">\n                      #{detail.block.number}\n                    </Heading>\n                  </Link>\n                </Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Hash\n                  </Heading>\n                </Td>\n                <Td>{detail.id}</Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Section\n                  </Heading>\n                </Td>\n                <Td>\n                  <Tag size=\"sm\" colorScheme=\"cyan\">\n                    {detail.section}\n                  </Tag>\n                </Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Method\n                  </Heading>\n                </Td>\n                <Td>\n                  <Tag size=\"sm\" variant=\"outline\" colorScheme=\"cyan\">\n                    {detail.method}\n                  </Tag>\n                </Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Signer\n                  </Heading>\n                </Td>\n                <Td>\n                  <Link\n                    as={RouterLink}\n                    to={`/accounts/${detail.signer.id}`}\n                    color=\"blue.600\"\n                  >\n                    <Text>{detail.signer.id}</Text>\n                  </Link>\n                </Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Nonce\n                  </Heading>\n                </Td>\n                <Td>{detail.nonce}</Td>\n              </Tr>\n              <Tr>\n                <Td>\n                  <Heading as=\"h6\" size=\"xs\">\n                    Signature\n                  </Heading>\n                </Td>\n                <Td>\n                  <Box p={4} background=\"blackAlpha.50\">\n                    <Box p={2} background=\"white\">\n                      <Text wordBreak=\"break-all\">{detail.signature}</Text>\n                    </Box>\n                  </Box>\n                </Td>\n              </Tr>\n            </Tbody>\n          </Table>\n        )}\n      </Box>\n      <Box mt={5} p={4} background=\"white\" boxShadow=\"sm\" borderRadius=\"lg\">\n        <Tabs>\n          <TabList>\n            <Tab>Logs</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              {!detail ? (\n                <Box\n                  p={10}\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  justifyContent=\"center\"\n                >\n                  <Spinner />\n                </Box>\n              ) : (\n                <Table>\n                  <Thead background=\"teal.50\">\n                    <Tr>\n                      <Th></Th>\n                      <Th>Method</Th>\n                      <Th>Data</Th>\n                    </Tr>\n                  </Thead>\n                  <Tbody>\n                    {detail.events.nodes.map(\n                      ({ section, method, data }, idx) => (\n                        <Tr key={`extrinsic-${id}`}>\n                          <Td>{idx}</Td>\n                          <Td>\n                            <Tag size=\"sm\" colorScheme=\"cyan\">\n                              {section}.{method}\n                            </Tag>\n                          </Td>\n                          <Td>{data}</Td>\n                        </Tr>\n                      )\n                    )}\n                  </Tbody>\n                </Table>\n              )}\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </div>\n  );\n};\n\nexport default ExtrinsicDetail;\n","import {\n  Flex,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Button,\n  Input,\n  Box,\n  Text,\n  Link,\n  Icon,\n  Table,\n  Thead,\n  Tbody,\n  Tfoot,\n  Tr,\n  Th,\n  Td,\n  Spinner,\n  HStack,\n  IconButton,\n  Heading,\n  Tag,\n} from \"@chakra-ui/react\";\nimport dayjs from \"dayjs\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport {\n  ChevronDownIcon,\n  TimeIcon,\n  ChevronRightIcon,\n  ChevronLeftIcon,\n} from \"@chakra-ui/icons\";\nimport { useState } from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport SearchBox from \"../../components/SearchBox\";\n\nconst EXTRINSICS_QUERY = gql`\n  query QueryExtrinsics($offset: Int!, $pageSize: Int!) {\n    extrinsics(offset: $offset, first: $pageSize, orderBy: TIMESTAMP_DESC) {\n      nodes {\n        id\n        section\n        method\n        timestamp\n        events {\n          totalCount\n        }\n        block {\n          number\n        }\n      }\n      totalCount\n    }\n  }\n`;\n\nconst PAGE_SIZE = 20;\n\nconst Extrinsics = () => {\n  const [page, setPage] = useState(0);\n  const [isOnTable, setIsOnTable] = useState(false);\n\n  const { loading, data, stopPolling, startPolling } = useQuery(\n    EXTRINSICS_QUERY,\n    {\n      variables: {\n        offset: page * PAGE_SIZE,\n        pageSize: PAGE_SIZE,\n      },\n    }\n  );\n\n  useEffect(() => {\n    startPolling(1000);\n    return () => stopPolling();\n  }, [startPolling, stopPolling]);\n\n  console.log(data);\n\n  return (\n    <div>\n      <SearchBox></SearchBox>\n      <Box p={5} background=\"white\" mt={5} boxShadow=\"sm\" borderRadius=\"lg\">\n        {loading ? (\n          <Box\n            p={10}\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Spinner />\n          </Box>\n        ) : (\n          <Table\n            variant=\"simple\"\n            onMouseEnter={() => setIsOnTable(true)}\n            onMouseLeave={() => setIsOnTable(false)}\n          >\n            <Thead>\n              <Tr>\n                <Th>Hash</Th>\n                <Th>Timestamp</Th>\n                <Th>Section</Th>\n                <Th>Method</Th>\n                <Th>Block</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {data?.extrinsics.nodes.map(\n                ({ id, timestamp, events, section, method, block }) => (\n                  <Tr key={`extrinsic-${id}`}>\n                    <Td>\n                      <Link\n                        as={RouterLink}\n                        to={`/extrinsics/${id}`}\n                        color=\"blue.600\"\n                      >\n                        {id.substr(32)}...\n                      </Link>\n                    </Td>\n                    <Td>\n                      <HStack spacing={2} mt={1}>\n                        <Icon\n                          as={TimeIcon}\n                          ml={3}\n                          boxSize={4}\n                          color=\"yellow.600\"\n                        />\n                        <Text color=\"grey\" fontSize=\"md\">\n                          {dayjs(timestamp).add(8, \"hours\").toNow(true)}\n                        </Text>\n                      </HStack>\n                    </Td>\n                    <Td>\n                      <Tag size=\"sm\" colorScheme=\"cyan\">\n                        {section}\n                      </Tag>\n                    </Td>\n                    <Td>\n                      <Tag size=\"sm\" colorScheme=\"cyan\" variant=\"outline\">\n                        {method}\n                      </Tag>\n                    </Td>\n                    <Td>\n                      <Link\n                        as={RouterLink}\n                        to={`/blocks/${block.number}`}\n                        color=\"blue.600\"\n                      >\n                        <Heading as=\"h6\" size=\"sm\">\n                          #{block.number}\n                        </Heading>\n                      </Link>\n                    </Td>\n                  </Tr>\n                )\n              )}\n            </Tbody>\n          </Table>\n        )}\n      </Box>\n      <Flex align=\"center\" justify=\"space-between\" mt={4}>\n        <div style={{ flexGrow: 1 }} />\n        <HStack>\n          <IconButton\n            aria-label=\"left\"\n            icon={<ChevronLeftIcon />}\n            disabled={page <= 0}\n            onClick={() => setPage(page - 1)}\n          />\n          <Box>\n            {page + 1} of{\" \"}\n            {data ? Math.ceil(data?.extrinsics.totalCount / PAGE_SIZE) : 1}\n          </Box>\n          <IconButton\n            disabled={\n              page >= Math.ceil(data?.extrinsics.totalCount / PAGE_SIZE)\n            }\n            aria-label=\"left\"\n            icon={<ChevronRightIcon />}\n            onClick={() => setPage(page + 1)}\n          />\n        </HStack>\n      </Flex>\n    </div>\n  );\n};\n\nexport default Extrinsics;\n","import {\n  HashRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n} from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { ChakraProvider, Center, Spinner } from \"@chakra-ui/react\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport { initPolkaApi, getBalanceOf } from \"./libs/polkadotApi\";\n\nimport Root from \"views/Root\";\nimport Home from \"views/Home\";\nimport Blocks from \"views/Blocks\";\nimport BlockDetail from \"views/Blocks/BlockDetail\";\nimport Accounts from \"views/Accounts\";\nimport AccountDetail from \"views/Accounts/AccountDetail\";\nimport Transfers from \"views/Transfers\";\nimport TransferDetail from \"views/Transfers/TransferDetail\";\nimport ExtrinsicDetail from \"views/Extrinsics/ExtrinsicDetail\";\nimport Extrinsics from \"views/Extrinsics\";\nimport { useEffect } from \"react\";\n\nfunction App() {\n  const [appchainInfo, setAppchainInfo] = useState<any>();\n  const [client, setClient] = useState<any>();\n\n  const urlParams = new URLSearchParams(window.location.search);\n  const appchain = urlParams.get(\"appchain\");\n\n  useEffect(() => {\n    (async () => {\n      try {\n        if (!appchain) {\n          setAppchainInfo(null);\n          return;\n        }\n        const info = await window.getAppchainInfo(appchain);\n        await initPolkaApi(info);\n        setAppchainInfo(info);\n      } catch (err) {\n        console.log(err);\n        setAppchainInfo(null);\n      }\n    })();\n  }, [appchain]);\n\n  useEffect(() => {\n    if (!appchainInfo) {\n      return;\n    }\n    setClient(\n      new ApolloClient({\n        uri: appchainInfo.subql_endpoint,\n        cache: new InMemoryCache(),\n      })\n    );\n  }, [appchainInfo]);\n\n  return (\n    <ChakraProvider>\n      {client ? (\n        <ApolloProvider client={client}>\n          <Router>\n            <Routes>\n              <Route path=\"/\" element={<Root />}>\n                <Route path=\"\" element={<Navigate to=\"home\" />} />\n                <Route path=\"home\" element={<Home />} />\n                <Route path=\"blocks\" element={<Blocks />} />\n                <Route path=\"blocks/:id\" element={<BlockDetail />} />\n                <Route path=\"accounts\" element={<Accounts />} />\n                <Route path=\"accounts/:id\" element={<AccountDetail />} />\n                <Route path=\"transfers\" element={<Transfers />} />\n                <Route path=\"transfers/:id\" element={<TransferDetail />} />\n                <Route path=\"extrinsics\" element={<Extrinsics />} />\n                <Route path=\"extrinsics/:id\" element={<ExtrinsicDetail />} />\n              </Route>\n            </Routes>\n          </Router>\n        </ApolloProvider>\n      ) : (\n        <Center h=\"100vh\">\n          <Spinner\n            thickness=\"4px\"\n            speed=\"0.65s\"\n            emptyColor=\"gray.200\"\n            color=\"gray.500\"\n            size=\"lg\"\n          />\n        </Center>\n      )}\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { connect, keyStores, WalletConnection, Contract } from \"near-api-js\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport dayjs from \"dayjs\";\n\ndayjs.extend(relativeTime);\n\nimport \"./index.css\";\n\nimport App from \"./App\";\n\nconst NETWORK = process.env.REACT_APP_OCT_NETWORK || \"testnet\";\nconst REGISTRY =\n  process.env.REACT_APP_OCT_REGISTRY_CONTRACT_NAME ||\n  \"registry.test_oct.testnet\";\n\nconst nearConfig = {\n  networkId: NETWORK,\n  nodeUrl: `https://rpc.${NETWORK}.near.org`,\n  contractName: REGISTRY,\n  walletUrl: `https://wallet.${NETWORK}.near.org`,\n  helperUrl: `https://helper.${NETWORK}.near.org`,\n  explorerUrl: `https://explorer.${NETWORK}.near.org`,\n  tokenDecimal: 18,\n};\n\nconst initNear = async () => {\n  const near = await connect(\n    Object.assign(\n      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },\n      nearConfig\n    )\n  );\n\n  window.walletConnection = new WalletConnection(near, \"octopus_bridge\");\n\n  window.registry = await new Contract(\n    window.walletConnection.account(),\n    REGISTRY,\n    {\n      viewMethods: [\"get_appchain_status_of\"],\n      changeMethods: [],\n    }\n  );\n\n  window.getAppchainInfo = async (appchain_id) => {\n    console.log(\"appchain_id\", appchain_id);\n    const appchainStatus = await window.registry.get_appchain_status_of({\n      appchain_id,\n    });\n    const appchainAnchor = appchainStatus.appchain_anchor;\n    window.anchor = await new Contract(\n      window.walletConnection.account(),\n      appchainAnchor,\n      {\n        viewMethods: [\"get_appchain_settings\"],\n        changeMethods: [],\n      }\n    );\n    let appchainInfo = await window.anchor.get_appchain_settings({});\n    appchainInfo = { ...appchainInfo, ...appchainStatus };\n    console.log(\"appchainInfo\", appchainInfo);\n    return appchainInfo;\n  };\n};\n\ninitNear().then(() => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n});\n"],"sourceRoot":""}